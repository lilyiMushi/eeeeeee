#include "MinecraftAI.h"

SkyblockStats::SkyblockStats() {
    toolMultipliers["wooden_pickaxe"] = 1.0;
    toolMultipliers["stone_pickaxe"] = 1.5;
    toolMultipliers["iron_pickaxe"] = 2.0;
    toolMultipliers["diamond_pickaxe"] = 3.0;
    toolMultipliers["netherite_pickaxe"] = 4.0;
    toolMultipliers["efficiency_1"] = 1.3;
    toolMultipliers["efficiency_2"] = 1.69;
    toolMultipliers["efficiency_3"] = 2.197;
    toolMultipliers["efficiency_4"] = 2.856; 
    toolMultipliers["efficiency_5"] = 3.713;
}

void SkyblockStats::LoadStatsFromConfig(const std::string& configFile) {
    std::ifstream file(configFile);
    if (!file.is_open()) {
        // Create default config
        Json::Value defaultConfig;
        defaultConfig["mining_speed"] = 100;
        defaultConfig["walking_speed"] = 100;
        defaultConfig["mining_fortune"] = 0;
        defaultConfig["strength"] = 0;
        defaultConfig["crit_chance"] = 5.0;
        defaultConfig["crit_damage"] = 50.0;
        
        std::ofstream outFile(configFile);
        outFile << defaultConfig;
        outFile.close();
        return;
    }
    
    Json::Value config;
    file >> config;
    
    currentStats.miningSpeed = config.get("mining_speed", 100).asInt();
    currentStats.walkingSpeed = config.get("walking_speed", 100).asInt();
    currentStats.miningFortune = config.get("mining_fortune", 0).asInt();
    currentStats.strength = config.get("strength", 0).asInt();
    currentStats.critChance = config.get("crit_chance", 5.0).asDouble();
    currentStats.critDamage = config.get("crit_damage", 50.0).asDouble();
}

void SkyblockStats::SetMiningSpeedMultiplier(double multiplier) {
    currentStats.miningSpeed = static_cast<int>(100 * multiplier);
}

double SkyblockStats::GetMiningSpeed(const std::string& tool, const std::string& block) {
    double baseSpeed = currentStats.miningSpeed / 100.0;
    double toolMultiplier = toolMultipliers.count(tool) ? toolMultipliers[tool] : 1.0;
    
    double blockMultiplier = 1.0;
    if (block == "stone") blockMultiplier = 1.5;
    else if (block == "cobblestone") blockMultiplier = 2.0;
    else if (block == "obsidian") blockMultiplier = 50.0;
    else if (block == "end_stone") blockMultiplier = 3.0;
    else if (block == "netherrack") blockMultiplier = 0.4;
    
    return baseSpeed * toolMultiplier / blockMultiplier;
}

double SkyblockStats::GetMovementSpeed() {
    return currentStats.walkingSpeed / 100.0;
}

void SkyblockStats::UpdateStats(const Stats& newStats) {
    currentStats = newStats;
}